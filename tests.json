{
  "v1ch02": [
    {"target": "Welcome/Welcome", "output_file": "Welcome_output.txt"}
  ],
  "v1ch03": [
    {"target": "FirstSample/FirstSample", "output_file": "FirstSample_output.txt"},
    {"target": "Constants/Constants", "output_file": "Constants_output.txt"},
    {"target": "Constants/Constants2", "output_file": "Constants_output.txt"},
    {"target": "InputTest/InputTest", "input_file": "InputTest_input.txt", "output_file": "InputTest_output.txt"},
    {"target": "Retirement/Retirement", "input_file": "Retirement_input.txt", "output_file": "Retirement_output.txt"},
    {"target": "Retirement2/Retirement2", "input_file": "Retirement2_input.txt", "output_file": "Retirement2_output.txt"},
    {"target": "LotteryOdds/LotteryOdds", "input_file": "LotteryOdds_input.txt", "output_file": "LotteryOdds_output.txt"},
    {"target": "BigIntegerTest/BigIntegerTest", "input_file": "BigIntegerTest_input.txt", "output_file": "BigIntegerTest_output.txt"},
    {"target": "Message/Message", "args": "-h world", "output_file": "Message_output.txt"},
    {"target": "Message/Message", "args": "-g cruel world", "output_file": "Message_output2.txt"},
    {"target": "CompoundInterest/CompoundInterest", "output_file": "CompoundInterest_output.txt"},
    {"target": "LotteryArray/LotteryArray", "output_file": "LotteryArray_output.txt"}
  ],
  "v1ch04": [
    {"target": "EmployeeTest/EmployeeTest", "output_file": "EmployeeTest_output.txt"},
    {"target": "StaticTest/StaticTest", "output_file": "StaticTest_output.txt"},
    {"target": "ParamTest/ParamTest", "output_file": "ParamTest_output.txt"},
    {"target": "PackageTest/PackageTest", "output_file": "PackageTest_output.txt"}
  ],
  "v1ch05": [
    {"target": "inheritance.ManagerTest", "output_file": "ManagerTest_output.txt"},
    {"target": "equals.EqualsTest", "output_file": "EqualsTest_output.txt"},
    {"target": "arrayList.ArrayListTest", "output_file": "../../v1ch04/testdata/EmployeeTest_output.txt"},
    {"target": "abstractClasses.PersonTest", "output_file": "PersonTest_output.txt"},
    {"target": "enums.EnumTest", "input_file": "EnumTest_input.txt", "output_file": "EnumTest_output.txt"},
    {"target": "sealed.SealedTest", "output_file": "SealedTest_output.txt"},
    {"target": "reflection.ReflectionTest", "input_file": "ReflectionTest_input.txt", "output_file": "ReflectionTest_output.txt"},
    {"target": "objectAnalyzer.ObjectAnalyzerTest",
      "jvm_options": "--add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED",
      "output_file": "ObjectAnalyzerTest_output.txt"},
    {"target": "arrays.CopyOfTest", "output_file": "CopyOfTest_output.txt"},
    {"target": "methods.MethodTableTest", "output_file": "MethodTableTest_output.txt"}
  ],
  "v1ch06": [
    {"target": "interfaces.EmployeeSortTest", "output_file": "EmployeeSortTest_output.txt"},
    {"target": "clone.CloneTest", "output_file": "CloneTest_output.txt"},
    {"target": "comparator.ComparatorTest", "output_file": "ComparatorTest_output.txt"},
    {"target": "serviceLoader.ServiceLoaderTest", "output_file": "ServiceLoaderTest_output.txt"}
  ],
  "v1ch07": [
    {"target": "except.ExceptTest", "output_file": "ExceptTest_output.txt"},
    {"target": "stackTrace.StackTraceTest", "input_file": "StackTraceTest_input.txt", "output_file": "StackTraceTest_output.txt"},
    {"target": "assertion.AssertionTest", "input_file": "AssertionTest_input1.txt", "output_file": "AssertionTest_output1.txt"},
    {"target": "assertion.AssertionTest", "input_file": "AssertionTest_input1.txt",
      "jvm_options": "-ea", "output_file": "AssertionTest_output2.txt"},
    {"target": "assertion.AssertionTest", "input_file": "AssertionTest_input3.txt",
      "jvm_options": "-ea:assertion.MathUtils", "output_file": "AssertionTest_output3.txt"}
  ],
  "v1ch08": [
    {"target": "pair1.PairTest1", "output_file": "PairTest1_output.txt"},
    {"target": "pair2.PairTest2", "output_file": "PairTest2_output.txt"},
    {"target": "bridgeMethod.BridgeMethodTest", "output_file": "BridgeMethodTest_output.txt"},
    {"target": "genericAlgorithms.GenericAlgorithms", "output_file": "GenericAlgorithms_output.txt"},
    {"target": "pair3.PairTest3", "output_file": "PairTest3_output.txt"},
    {"target": "genericReflection.GenericReflectionTest", "args": "pair.Pair", "output_file": "GenericReflectionTest_output1.txt"},
    {"target": "genericReflection.GenericReflectionTest", "args": "pair2.ArrayAlg", "output_file": "GenericReflectionTest_output2.txt"},
    {"target": "genericReflection.TypeLiterals", "output_file": "TypeLiterals_output.txt"}
  ],
  "v1ch09": [
    {"target": "circularArrayQueue.CircularArrayQueueTest", "output_file": "CircularArrayQueueTest_output.txt"},
    {"target": "linkedList.LinkedListTest", "output_file": "LinkedListTest_output.txt"},
    {"target": "treeSet.TreeSetTest", "output_file": "TreeSetTest_output.txt"},
    {"target": "priorityQueue.PriorityQueueTest", "output_file": "PriorityQueueTest_output.txt"},
    {"target": "map.MapTest", "output_file": "MapTest_output.txt"}
  ],
  "v1ch12": [
    {"target": "future.FutureTest", "input_file": "FutureTest_input.txt", "output_file": "FutureTest_output.txt"}
  ],
  "v2ch01": [
    {"target": "streams.CountLongWords", "output_file": "CountLongWords_output.txt"},
    {"target": "optional.OptionalTest", "output_file": "OptionalTest_output.txt"},
    {"target": "collecting.CollectingResults", "output_file": "CollectingResults_output.txt"},
    {"target": "collecting.CollectingIntoMaps", "jvm_options": "-Dfile.encoding=UTF-8", "output_file": "CollectingIntoMaps_output.txt"},
    {"target": "collecting.DownstreamCollectors", "output_file": "DownstreamCollectors_output.txt"},
    {"target": "streams.PrimitiveTypeStreams", "jvm_options": "-Dfile.encoding=UTF-8", "output_file": "PrimitiveTypeStreams_output.txt"}
  ],
  "v2ch02": [
    {"target": "textFile.TextFileTest", "output_file": "TextFileTest_output.txt"},
    {"target": "randomAccess.RandomAccessTest", "output_file": "TextFileTest_output.txt"},
    {"target": "serial.ObjectStreamTest", "output_file": "ObjectStreamTest_output.txt"},
    {"target": "serializationTweaks.ObjectStreamTest", "output_file": "TweakObjectStreamTest_output.txt"},
    {"target": "serialClone.SerialCloneTest", "output_file": "SerialCloneTest_output.txt"},
    {"target": "zip.ZipTest", "args": "zip/SampleProject.zip", "output_file": "ZipTest_output.txt",
      "testdata": ["zip/SampleProject.zip"]},
    {"target": "randomAccess2.RandomAccessTest", "output_file": "TextFileTest_output.txt"},
    {"target": "regex.RegexTest", "input_file": "RegexTest_input1.txt", "output_file": "RegexTest_output1.txt"},
    {"target": "regex.RegexTest", "input_file": "RegexTest_input2.txt", "output_file": "RegexTest_output2.txt"}
  ],
  "v2ch03": [
    {"target": "dom.JSONConverter", "args": "dom/config.xml", "output_file": "JSONConverter_output_config.txt",
      "testdata": ["dom/config.xml"]},
    {"target": "dom.JSONConverter", "args": "dom/server.xml", "output_file": "JSONConverter_output_server.txt",
      "testdata": ["dom/server.xml"]},
    {"target": "read.XMLReadTest", "args": "read/config.xml", "output_file": "XMLReadTest_output.txt",
      "testdata": ["read/config.xml", "read/config.dtd"]},
    {"target": "read.XMLReadTest", "args": "read/config-schema.xml", "output_file": "XMLReadTest_output.txt",
      "testdata": ["read/config-schema.xml", "read/config.xsd"]},
    {"target": "xpath.XPathTest", "args": "xpath/fontdialog.xml",
      "input_file": "XPathTest_input_fontdialog.txt", "output_file": "XPathTest_output_fontdialog.txt",
      "testdata": ["xpath/fontdialog.xml", "xpath/gridbag.dtd"]},
    {"target": "xpath.XPathTest", "args": "xpath/bugs.xhtml true",
      "input_file": "XPathTest_input_bugs.txt", "output_file": "XPathTest_output_bugs.txt",
      "testdata": ["xpath/bugs.xhtml"]},
    {"target": "sax.SAXTest", "args": "xpath/bugs.xhtml", "output_file": "SAXTest_output.txt",
      "testdata": ["xpath/bugs.xhtml"]},
    {"target": "stax.StAXTest", "args": "xpath/bugs.xhtml", "output_file": "SAXTest_output.txt",
      "testdata": ["xpath/bugs.xhtml"]},
    {"target": "transform.TransformTest", "args": "transform/makehtml.xsl", "output_file": "TransformTest_output.html"},
    {"target": "transform.TransformTest", "args": "transform/makeprop.xsl", "output_file": "TransformTest_output.properties"}
  ],
  "v2ch05": [
    {"target": "test.TestDB", "output_file": "TestDB_output.txt"},
    {"target": "exec.ClearDB", "output_file": "ClearDB_output.txt"},
    {"target": "exec.ExecSQL", "args": "Books.sql", "output_file": "ExecSQL_output_Books.txt"},
    {"target": "exec.ExecSQL", "args": "Authors.sql", "output_file": "ExecSQL_output_Authors.txt"},
    {"target": "exec.ExecSQL", "args": "Publishers.sql", "output_file": "ExecSQL_output_Publishers.txt"},
    {"target": "exec.ExecSQL", "args": "BooksAuthors.sql", "output_file": "ExecSQL_output_BooksAuthors.txt"},
    {"target": "query.QueryTest", "input_file": "QueryTest_input.txt", "output_file": "QueryTest_output.txt"}
  ],
  "v2ch06": [
    {"target": "localdates.LocalDates", "output_file": "LocalDates_output.txt"},
    {"target": "zonedtimes.ZonedTimes", "output_file": "ZonedTimes_output.txt"},
    {"target": "formatting.Formatting", "jvm_options": "-Dfile.encoding=UTF-8", "output_file": "Formatting_output.txt"}
  ],
  "v2ch09": [
    {"target": "v2ch09.hellomod/com.horstmann.hello.HelloWorld", "output_file": "HelloWorld_output.txt"},
    {"target": "v2ch09.exportedpkg/com.horstmann.hello.HelloWorld", "output_file": "HelloWorld_output.txt"},
    {"target": "v2ch09.openpkg/com.horstmann.places.Demo", "output_file": "ObjectAnalyzer_output.txt"},
    {"target": "v2ch09.openpkg2/com.horstmann.places.Demo", "output_file": "ObjectToJSON_output.txt"},
    {"target": "v2ch09.automod/com.horstmann.places.CSVDemo", "output_file": "CSVDemo_output.txt"},
    {"target": "v2ch09.useservice/com.horstmann.hello.HelloWorld", "output_file": "GreeterService_output_de.txt"},
    {"target": "v2ch09.useservice/com.horstmann.hello.HelloWorld", "args": "de", "output_file": "GreeterService_output_de.txt"},
    {"target": "v2ch09.useservice/com.horstmann.hello.HelloWorld", "args": "fr", "output_file": "GreeterService_output_fr.txt"},
    {"target": "v2ch09.useservice/com.horstmann.hello.HelloWorld", "args": "en", "output_file": "GreeterService_output_en.txt"}
  ]
}
